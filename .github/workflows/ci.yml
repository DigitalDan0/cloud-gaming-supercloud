name: Cloud Gaming CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/sunshine

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn pytest pytest-mock stripe python-multipart
        pip install black pylint pytest-cov
    
    - name: Run linting
      run: |
        black --check broker/
        pylint broker/ --disable=missing-docstring,invalid-name
    
    - name: Run tests
      env:
        AKASH_FROM: test-key
        STRIPE_SECRET_KEY: sk_test_placeholder
      run: |
        pytest tests/ -v --cov=broker --cov-report=term-missing

  build-image:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./images/ubuntu-sunshine
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Verify NVENC support
      run: |
        echo "Image built successfully"
        echo "In production, would verify NVENC with: docker run --rm --gpus all ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ffmpeg -encoders | grep nvenc"

  validate-sdl:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Akash CLI
      run: |
        curl -sSfL https://raw.githubusercontent.com/akash-network/provider/main/install.sh | sh
        sudo mv ./bin/akash /usr/local/bin/
    
    - name: Validate SDL template
      run: |
        akash validate sdl/sunshine.yaml
    
    - name: Show SDL info
      run: |
        echo "SDL validation passed"
        echo "Pricing: 5000 uakt/hour (â‰ˆ $0.05/hour)"
        echo "Resources: 1 GPU, 16 GiB RAM, 4 vCPU"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, build-image, validate-sdl]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging (stub)
      run: |
        echo "Would deploy to staging environment"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "SDL: sdl/sunshine.yaml"
        echo "Command: akash tx deployment create sdl/sunshine.yaml --from staging-key"
        echo "Deployment stubbed - manual deployment required for now"
    
    - name: Notify deployment
      run: |
        echo "Staging deployment initiated"
        echo "Monitor at: https://akash.network/deployments"